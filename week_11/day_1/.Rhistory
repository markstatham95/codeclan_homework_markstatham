data(msleep)
library(tidyverse)
library(janitor)
library(infer)
data(msleep)
data(msleep)
msleep
head(msleep)
glimpse(msleep)
msleep %>%
filter(name == "Jabberwockie")
msleep %>%
distinct(name)
view(msleep)
?specify
observed_stat <- msleep %>%
summarise(mean_total_sleep = mean(total_sleep))
observed_stat <- msleep %>%
summarise(mean_total_sleep = mean(sleep_total))
observed_stat
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesize(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution %>%
visualise(bins = 30) +
shade_p_value(obs_stat = observed_stat, direction = "both")
null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
omni_herbi <- msleep %>%
filter(vore == "herbi" | "omni")
omni_herbi <- msleep %>%
filter(vore == "herbi" | vore == "omni")
omni_herbi
omni_herbi %>%
group_by(vore) %>%
summarise(n = n())
omni_herbi %>%
ggplot(aes(x = total_sleep)) +
geom_boxplot()
omni_herbi %>%
ggplot(aes(x = sleep_total)) +
geom_boxplot()
omni_herbi %>%
ggplot(aes(y = sleep_total)) +
geom_boxplot()
omni_herbi %>%
group_by(vore) %>%
ggplot(aes(x = sleep_total, )) +
geom_boxplot()
omni_herbi %>%
group_by(vore) %>%
ggplot(aes(x = sleep_total)) +
geom_boxplot()
omni_herbi %>%
group_by(vore) %>%
ggplot(aes(x = sleep_total, y = vore)) +
geom_boxplot()
omni_herbi %>%
group_by(vore) %>%
ggplot(aes(x = vore, y = sleep_total)) +
geom_boxplot()
null_dist_vore <- omni_herbi %>%
specify(sleep_total ~ vore) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
null_dist_vore
obs_stat_vore <- omni_herbi %>%
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
null_dist_vore %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_stat_vore)
null_dist_vore %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_stat_vore, direction = "left")
obs_stat_vore
null_dist_vore %>%
get_p_value(obs_stat = obs_stat_vore, direction = "left")
null_dist_vore %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_stat_vore, direction = "right")
null_dist_vore %>%
get_p_value(obs_stat = obs_stat_vore, direction = "right")
null_dist_vore %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_stat_vore, direction = "right")
null_dist_vore %>%
get_p_value(obs_stat = obs_stat_vore, direction = "right")
msleep %>%
filter(conservation == "domesticated")
msleep %>%
group_by(conservation) %>%
summarise(n())
msleep %>%
filter(conservation == "domesticated") %>%
mutate(prop_dom = n() / n(msleep))
msleep %>%
filter(conservation == "domesticated") %>%
mutate(prop_dom = n() / nrow(msleep))
msleep %>%
filter(conservation == "domesticated") %>%
summarise(prop_dom = n() / nrow(msleep))
msleep %>%
group_by(conservation) %>%
summarise(n())
msleep %>%
filter(conservation == "domesticated") %>%
summarise(prop_dom = n() / nrow(msleep))
msleep <- msleep %>%
mutate(domestic_flag = ifelse(conservation == "domesticated",
"dom", "not_dom"))
msleep
msleep <- msleep %>%
mutate(domestic_flag = ifelse(conservation == "domesticated",
"dom", "not_dom")) %>%
filter(!is.na(domestic_flag))
msleep
data(msleep)
msleep
msleep_dom <- msleep %>%
mutate(domestic_flag = ifelse(conservation == "domesticated",
"dom", "not_dom")) %>%
filter(!is.na(domestic_flag))
msleep_dom
null_distribution <- msleep_dom %>%
specify(response = domestic_flag, success = "dom") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution_domo <- msleep_dom %>%
specify(response = domestic_flag, success = "dom") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution_dom <- msleep_dom %>%
specify(response = domestic_flag, success = "dom") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution_dom %>%
visualise(bins = 30)
obs_dom_stat <- msleep %>%
filter(conservation == "domesticated") %>%
summarise(prop_dom = n() / nrow(msleep))
obs_dom_stat
null_distribution_dom %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_dom_stat, direction = "right")
null_distribution_dom %>%
get_p_value(obs_stat = obs_dom_stat, direction = "right")
null_distribution_dom %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_dom_stat, direction = "right")
null_distribution_dom %>%
get_p_value(obs_stat = obs_dom_stat, direction = "right")
null_distribution_dom %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_dom_stat, direction = "right")
null_distribution_dom %>%
get_p_value(obs_stat = obs_dom_stat, direction = "right")
#reject HO in favour of HA
observed_stat <- msleep %>%
summarise(mean_total_sleep = mean(sleep_total))
observed_stat
observed_stat
null_distribution %>%
visualise(bins = 30) +
shade_p_value(obs_stat = observed_stat, direction = "both")
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesize(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution %>%
visualise(bins = 30) +
shade_p_value(obs_stat = observed_stat, direction = "both")
obs_dom_stat <- msleep %>%
specify(response = domestic_flag, success = "dom") %>%
calculate(stat = "prop")
msleep_dom <- msleep %>%
mutate(domestic_flag = ifelse(conservation == "domesticated",
"dom", "not_dom")) %>%
filter(!is.na(domestic_flag))
obs_dom_stat <- msleep %>%
specify(response = domestic_flag, success = "dom") %>%
calculate(stat = "prop")
obs_dom_stat <- msleep_dom %>%
specify(response = domestic_flag, success = "dom") %>%
calculate(stat = "prop")
obs_dom_stat
null_distribution_dom <- msleep_dom %>%
specify(response = domestic_flag, success = "dom") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution_dom %>%
visualise(bins = 30) +
shade_p_value(obs_stat = obs_dom_stat, direction = "right")
null_distribution_dom %>%
get_p_value(obs_stat = obs_dom_stat, direction = "right")
library(tidyverse)
grades <- read_csv("~/Downloads/grades.csv")
grades
