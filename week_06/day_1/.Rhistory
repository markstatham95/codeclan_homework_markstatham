6 ^3
library(prob)
rolldie(4)
two_die <- rolldie(4)
two_die <- two_die %>%
mutate(total = X1 + X2)
library(tidyverse)
two_die <- two_die %>%
mutate(total = X1 + X2)
two_die
two_die %>%
filter(total = between(total, 5, 7))
two_die %>%
filter(total == between(total, 5, 7))
two_die %>%
filter(total == between( 5, 7))
two_die %>%
filter(total == between(two_die, 5, 7))
two_die
two_die %>%
filter(total %in% c(5,6, 7))
two_die %>%
filter(total %in% c(5,6, 7)) %>%
summarise(n())
nrow(two_die)
two_die %>%
filter(total %in% c(5,6, 7)) %>%
summarise(n())
four_die <- rolldie(4)
two_four <- four_die %>%
mutate(total = X1 + X2)
nrow(four_die)
four_die %>%
filter(total %in% c(5,6, 7)) %>%
summarise(n())
four_die <- four_die %>%
mutate(total = X1 + X2)
nrow(four_die)
four_die %>%
filter(total %in% c(5,6, 7)) %>%
summarise(n())
540 / nrow(four_die)
library(gtools)
library(gtools)
permutations(n = 5, r = 5, repeats.allowed = FALSE)
1 / 120
permutations(n = 5, r = 5, repeats.allowed = FALSE)
1 / 120
six_die <- rolldie(6)
nrow(six_die)
six_die
tail(six_die)
nrow(six_die)
perm_die_six <- permutations(n = 6, r = 6, repeats.allowed = TRUE)
(perm_die_six <- permutations(n = 6, r = 6, repeats.allowed = TRUE))
six_die
nrow(six_die)
1/ nrow(six_die)
comb_die_six <- combinations(n = 6, r = 6, repeats.allowed = TRUE)
nrow(comb_die_six)
1 / 462
six_die %>%
isin(., c(6, 5, 4, 3, 2, 1), ordered = TRUE)
six_die %>%
filter(isin(., c(6, 5, 4, 3, 2, 1), ordered = TRUE))
six_die_my_perm %>%
filter(isin(., c(6, 5, 4, 3, 2, 1), ordered = TRUE))
six_die_my_perm <- six_die %>%
filter(isin(., c(6, 5, 4, 3, 2, 1), ordered = TRUE))
prob <- nrow(six_die_my_perm) / nrow(six_die)
(prob <- nrow(six_die_my_perm) / nrow(six_die))
1/ nrow(six_die)
patients <- c("Alice", "Bob", "Carmen", "Dinesh", "Ella", "Fergus", "Gianna", "Henry")
appointments <- as_tibble(permutations(n = 8, r = 5, v = patients, repeats.allowed = FALSE))
appointments
nrow(appointments)
app_g_and_d <- appointments %>%
filter(isin(c("Gianna", "Danesh")))
app_g_and_d <- appointments %>%
filter(isin(c("Gianna", "Danesh"), ordered = FALSE))
app_g_and_d <- appointments %>%
filter(isin(., c("Gianna", "Danesh"), ordered = FALSE))
app_g_and_d
appointments <- as_tibble(permutations(n = 8, r = 5, v = patients, repeats.allowed = FALSE))
nrow(appointments)
app_g_and_d <- appointments %>%
filter(isin(., c("Gianna", "Danesh"), ordered = FALSE))
app_g_and_d
appointments %>%
filter(isin(., c("Gianna", "Danesh"), ordered = FALSE))
app_g_and_d <- appointments %>%
filter(isin(., c("Gianna", "Dinesh"), ordered = FALSE))
app_g_and_d
prob_G_D <- nrow(app_g_and_d) / nrow(appointments)
(prob_G_D <- nrow(app_g_and_d) / nrow(appointments))
app_g_and_d_ordered <- appointments %>%
filter(isin(., c("Gianna", "Dinesh"), ordered = TRUE))
#probability
(prob_g_before_d <- nrow(app_g_and_d_ordered) / nrow(appointments)
(prob_g_before_d <- nrow(app_g_and_d_ordered) / nrow(appointments))
high_priority_patients <- c("Carmen", "Henry")
high_pri_apps <- as_tibble(permutations(n = 2, r = 2, v = high_priority_patients, repeats.allowed = FALSE))
high_pri_apps
low_priority_patients <- c("Alice", "Bob", "Dinesh", "Ella", "Fergus", "Gianna")
low_pri_apps <- as_tibble(permutations(n = 6, r = 3, v = low_priority_patients, repeats.allowed = FALSE))
high_pri_apps
low_pri_apps
names(low_pri_apps) <- c("app3", "app4", "app5")
low_pri_apps
names(high_pri_apps) <- c("app1", "app2")
?merge
appointments_post_triage <- merge(high_pri_apps, low_pri_apps)
appointments_post_triage
nrow(appointments_post_triage)
student_quiz_team <- combinations(n = 8, r = 5, repeats.allowed = FALSE)
nrow(student_quiz_team)
student_quiz_captains <- combinations(n = 8, r =1, repeats.allowed = FALSE)
student_quiz_captains
student_quiz_captains <- as_tibble(combinations(n = 8, r = 1, repeats.allowed = FALSE))
student_quiz_captains
four_die
four_die <- four_die %>%
mutate(total = X1 + X2 + X2 + X4)
four_die <- four_die %>%
mutate(total = X1 + X2 + X3 + X4)
nrow(four_die)
four_die %>%
filter(total %in% c(5,6, 7)) %>%
summarise(n())
four_die
student_quiz_captains
student_quiz_team_minus_captain <- combinations(n = 7, r = 4, repeats.allowed = FALSE)
8 * nrow(student_quiz_team_minus_captain)
four_die %>%
filter(total %in% c(5,6,7)) %>%
summarise(n())
nrow(four_die)
540 / nrow(four_die)
four_die %>%
filter(total %in% c(5,6,7)) %>%
summarise(n())
34 / nrow(four_die)
six_die_my_comb <- six_die %>%
filter(isin(., c(6, 5, 4, 3, 2, 1), ordered = FALSE))
(nrow(six_die_my_comb)/nrow(six_die))
mother_son_uni <- data.frame(
mother = c(32, 35),
son = c(22, 31)
)
mother_son_uni <- cbind(mother_son_uni, rowSums(mother_son_uni))
mother_son_uni <- rbind(mother_son_uni, colSums(mother_son_uni))
mother_son_uni
rownames(mother_son_uni) <- c("attend_uni", "not_attend", "total")
mother_son_uni
colnames(mother_son_uni) <- c("mother", "son", "total")
mother_son_uni
total <- 120
source('~/.active-rstudio-document', echo=TRUE)
uni
#set up the dataframe
uni <- data.frame(
mother_yes = c(32, 22),
mother_no = c(35, 31)
)
uni <- cbind(uni, rowSums(uni))
uni <- rbind(uni, colSums(uni))
colnames(uni) <- c("mother_yes", "mother_no", "sum")
rownames(uni) <- c("son_yes", "son_no", "sum")
uni
p_son_attend_AND_mother_attend <- uni["son_yes", "mother_yes"] / total
p_son_ye_AND_mother_yes <- uni["son_yes", "mother_yes"] / total
p_son_yes <- uni["son_yes", "sum"] / total
p_son_no <- uni["son_no", "sum"] / total
p_mother_yes <- uni["mother_yes", "sum"] / total
p_mother_no <- uni["mother_no", "sum"] / total
(p_son_yes_GIVEN_mother_yes <- p_son_ye_AND_mother_yes / p_mother_yes)
p_mother_no <- uni["mother_no", "sum"] / total
(p_son_ye_AND_mother_yes <- uni["son_yes", "mother_yes"] / total)
(p_mother_yes <- uni["mother_yes", "sum"] / total)
(p_mother_yes <- uni["sum", "mother_yes"] / total)
(p_son_yes_GIVEN_mother_yes <- p_son_ye_AND_mother_yes / p_mother_yes)
p_mother_no <- uni["sum", "mother_no"] / total
(p_son_yes_GIVEN_mother_no <- p_son_ye_AND_mother_yes / p_mother_no)
p_son_yes_GIVEN_mother_no = p_son_yes
p_son_yes_GIVEN_mother_no == p_son_yes
