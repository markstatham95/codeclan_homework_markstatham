library(RPostgreSQL)
library(keyring)
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
db_connection <- dbConnect(drv = PostgreSQL(max.con = 2),
user = username,
password = password,
dbname = "wrestling",
host = "localhost")
rm(username)
rm(password)
dbGetQuery(db_connection,
"SELECT * FROM wrestling")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers")
dbDisconnect(conn = db_connection)
keyring_create(keyring = "remote")
key_set(service = "postgresql_username", keyring = "remote"
key_set(service = "postgresql_username", keyring = "remote")
key_set(service = "postgresql_password", keyring = "remote")
keyring_lock(keyring = "remote")
keyring_lock("remote")
keyring_unlock("remote")
username <- key_get(service = "wrestling_postgresql_username", keyring = "remote")
key_set(service = "wrestling_postgresql_username", keyring = "remote")
key_set(service = "wrestling_postgresql_password", keyring = "remote")
keyring_lock("remote")
keyring_unlock("remote")
keyring_unlock("remote")
keyring_unlock("remote")
username <- key_get(service = "wrestling_postgresql_username", keyring = "remote")
password <- key_get(service = "wrestling_postgresql_password", keyring = "remote")
keyring_lock("remote")
rm(username)
rm(password)
remote_db_connection <- dbConnect(drv = PostgreSQL(max.con = 2),
user = username,
password = password,
dbname = "mvhbdgdk",
host = "manny.db.elephantsql.com")
keyring_unlock("remote")
username <- key_get(service = "wrestling_postgresql_username", keyring = "remote")
password <- key_get(service = "wrestling_postgresql_password", keyring = "remote")
keyring_lock("remote")
remote_db_connection <- dbConnect(drv = PostgreSQL(max.con = 2),
user = username,
password = password,
dbname = "mvhbdgdk",
host = "manny.db.elephantsql.com")
dbGetQuery(remote_db_connection,
"SELECT * FROM wrestlers")
dbDisconnect(conn = remote_db_connection)
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born = 'United Kingdom'")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
db_connection <- dbConnect(drv = PostgreSQL(max.con = 2),
user = username,
password = password,
dbname = "wrestling",
host = "localhost")
rm(username)
rm(password)
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born = 'United Kingdom'")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born = 'United Kingdom'
AND total_matches >= 40")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born = 'Japan'
AND total_matches >= 40")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE win_percent BETWEEN 50 AND 60")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE name LIKE 'X%'")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE countries IN(LIKE 'I%')")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE countries LIKE 'I%'
")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born LIKE 'I%'
")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born IN(LIKE 'I%')
")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born IN(born LIKE 'I%')
")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born LIKE 'I%')
")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born LIKE 'I%')
")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born LIKE 'I%'")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born LIKE 'I%'")
dbGetQuery(db_connection,
"SELECT COUNT(DISTINCT) FROM wrestlers
WHERE born LIKE 'I%'")
dbGetQuery(db_connection,
"SELECT COUNT(DISTINCT) FROM wrestlers
WHERE born LIKE 'I%'")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE NOT born LIKE 'I%'")
dbGetQuery(db_connection,
"SELECT COUNT(*) FROM wrestlers
WHERE born LIKE 'I%'")
dbGetQuery(db_connection,
"SELECT * FROM wrestlers
WHERE born LIKE 'I%'")
dbDisconnect(db_connection)
keyring_unlock("remote")
source('~/.active-rstudio-document', echo=TRUE)
keyring_unlock("remote")
?keyring_create
?keyring_delete
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE start_date
BETWEEN '2016-01-01' AND '2016-12-31'
AND fte_hours >= 0.5")
library(keyring)
library(RPostgreSQL)
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
my_db_connection <- dbConnect(drv = PostgreSQL(),
user = username,
password = password,
dbname = "omni_employees",
host = "localhost")
rm(username)
rm(password)
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
# using a WHERE statement - like a subset function in r
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE id = 4")
library(keyring)
library(RPostgreSQL)
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
my_db_connection <- dbConnect(drv = PostgreSQL(),
user = username,
password = password,
dbname = "omni_employees",
host = "localhost")
rm(username)
rm(password)
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT COUNT(*) FROM employees
WHERE department = 'Legal'"
dbGetQuery(my_db_connection,
"SELECT COUNT(*) FROM employees
WHERE department = 'Legal'")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(*) AS employee_count
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(*) AS employee_count
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(*) AS number_fte_quarter_hald
FROM employees
WHERE fte_hours BETWEEN 0.25 AND 0.5
GROUP BY department")
# using a WHERE statement - like a subset function in r
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE id = 4")
#filter then smush
dbGetQuery(my_db_connection,
"SELECT department, COUNT(*) AS number_fte_quarter_hald
FROM employees
WHERE fte_hours BETWEEN 0.25 AND 0.5
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, MIN(start_date) as min_start_date
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, MIN(start_date) as min_start_date
FROM employees
GROUP BY department")
#not quite what we were looking for, use NOW()
dbGetQuery(my_db_connection,
"SELECT department, NOW()-MIN(start_date) as min_start_date
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, MIN(start_date) as min_start_date
FROM employees
GROUP BY department")
#not quite what we were looking for, use NOW()
dbGetQuery(my_db_connection,
"SELECT department, NOW()-MIN(start_date) as longest_time_served
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, NOW()-MIN(start_date) as longest_time_served
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(*) as enrolled_pension_scheme
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT pension_enrol, COUNT(*) as enrolled_pension_scheme
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(*) as enrolled_pension_scheme
FROM employees
GROUP BY pension_enrol")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(id) as enrolled_pension_scheme
FROM employees
GROUP BY pension_enrol")
dbGetQuery(my_db_connection,
"SELECT pension_enrol, COUNT(id) as enrolled_pension_scheme
WHERE pension_enrol = TRUE
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(id) as enrolled_pension_scheme
WHERE pension_enrol = TRUE
FROM employees
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(id) as no_enrolled_pension_scheme
FROM employees
WHERE pension_enrol = TRUE
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(id) AS no_first_name
FROM employees
WHERE first_name IS NULL
GROUP BY country")
dbGetQuery(my_db_connection,
"SELECT country, COUNT(id) AS no_first_name
FROM employees
WHERE first_name IS NULL
GROUP BY country")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(id) as number_pension_enrol
FROM employees
WHERE pension_enrol = TRUE
GROUP BY department")
dbGetQuery(my_db_connection,
"SELECT department, COUNT(*) AS employee_count
FROM employees
GROUP BY department
HAVING COUNT(*) > 90")
dbGetQuery(my_db_connection,
"SELECT country, MIN(salary) as min_salary_pension_enrol
FROM employees
WHERE pension_enrol = TRUE
GROUP BY country
HAVING MIN(salary) < 21000")
dbGetQuery(my_db_connection,
"SELECT department, MIN(start_date) as start_prior_91
FROM employees
WHERE grade = 1
GROUP BY department
HAVING MIN(start_date) < '1991-01-01")
dbGetQuery(my_db_connection,
"SELECT department, MIN(start_date) as start_prior_91
FROM employees
WHERE grade = 1
GROUP BY department
HAVING MIN(start_date) < '1991-01-01'")
dbGetQuery(my_db_connection,
"SELECT department, MIN(start_date) as dept_start_prior_91
FROM employees
WHERE grade = 1
GROUP BY department
HAVING MIN(start_date) < '1991-01-01'")
#each sql query has a limitation in how much it can do
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'Japan' AND salary > AVG(salary)")
dbGetQuery(my_db_connection,
"SELECT AVG(salary) FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'Japan' AND salary > (SELECT AVG(salary) FROM employees)")
dbGetQuery(my_db_connection,
"SELECT fte_hours FROM employees
WHERE fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC
LIMIT 1")
dbGetQuery(my_db_connection,
"SELECT fte_hours, COUNT(fte_hours) FROM employees
WHERE fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC
LIMIT 1")
#quite a convoluted way of finding the mode
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'United States' AND WHERE fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'United States' AND fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'United States' AND (fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC)")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'United States' AND fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'United States' AND fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC
LIMIT 1")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'United States' AND fte_hours = (IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC
LIMIT 1)")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country = 'United States' AND fte_hours = (
SELECT fte_hours FROM employees
WHERE fte_hours IS NOT NULL
GROUP BY fte_hours
ORDER BY COUNT(fte_hours) DESC
LIMIT 1)")
# similar functionality to r with logical statements, eg !=, <= >= etc
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE fte_hours >= 0.5")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
WHERE country != 'Brazil'")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
library(keyring)
library(RPostgreSQL)
keyring_unlock("local")
library(keyring)
library(RPostgreSQL)
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
my_db_connection <- dbConnect(drv = PostgreSQL(),
user = username,
password = password,
dbname = "omni_employees",
host = "localhost")
rm(username)
rm(password)
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
knitr::opts_chunk$set(echo = TRUE)
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
stock_prices <- c(23, 27, 23, 21, 34, 24, 25, 30, 37, 30)
day_of_week <- rep(c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), times = 2)
day_of_week
day_of_week_factor <- as.factor(day_of_week)
day_of_week_factor
?
class(day_of_week_factor)
class(day_of_week)
stock.data[,1]
library(keyring)
library(RPostgreSQL)
keyring_unlock("local")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
cars
kable(cars)
library(knitr)
kable(mtcars[1:5, ])
mtcars
mtcars
mtcars
summary(cars)
library(knitr)
kable(mtcars[1:5, ])
mtcars
