library(httr)
get_emotions_from_indico_api <- function(message){
keyring_unlock("remote")
indico_api_key <- key_get(service = "indico_api_key", keyring = "remote")
keyring_lock("remote")
params <- list(
api_key = indico_api_key,
data = message
)
url <- 'https://apiv2.indico.io/emotion/'
response <- POST(url, query = params)
return(content(response))
}
messages_1 <- c("I really like working here, great place, decent perks", "Hmm, not so sure I'll stay: long working hours and low pay, bad morale")
get_emotions_from_indico_api(messages_1)
get_emotions_from_indico_api("I really like working here, great place, decent perks")
library(keyring)
library(httr)
get_emotions_from_indico_api <- function(message){
keyring_unlock("remote")
indico_api_key <- key_get(service = "indico_api_key", keyring = "remote")
keyring_lock("remote")
params <- list(
api_key = indico_api_key,
data = message
)
url <- "https://apiv2.indico.io/emotion/"
response <- POST(url, query = params)
return(content(response))
}
get_emotions_from_indico_api(messages_1)
library(keyring)
library(httr)
keyring_unlock("remote")
library(keyring)
library(httr)
keyring_unlock("remote")
indico_api_key <- key_get(service = "indico_api_key", keyring = "remote")
keyring_lock("remote")
get_emotions_from_indico_api <- function(message){
params <- list(
api_key = indico_api_key,
data = message
)
url <- "https://apiv2.indico.io/emotion/"
response <- POST(url, query = params)
return(content(response))
}
get_emotions_from_indico_api("I really like working here, great place, decent perks")
messages_1 <- c("I really like working here, great place, decent perks", "Hmm, not so sure I'll stay: long working hours and low pay, bad morale")
get_emotions_from_indico_api(messages_1)
get_emotions_from_indico_api <- function(message){
keyring_unlock("remote")
indico_api_key <- key_get(service = "indico_api_key", keyring = "remote")
keyring_lock("remote")
params <- list(
api_key = indico_api_key,
data = message
)
url <- "https://apiv2.indico.io/emotion/"
response <- POST(url = url, query = params)
return(content(response))
}
get_emotions_from_indico_api("I really like working here, great place, decent perks")
messages_1 <- c("I really like working here, great place, decent perks", "Hmm, not so sure I'll stay: long working hours and low pay, bad morale")
get_emotions_from_indico_api(messages_1)
get_emotions_from_indico_api <- function(message){
keyring_unlock("remote")
indico_api_key <- key_get(service = "indico_api_key", keyring = "remote")
keyring_lock("remote")
params <- list(
api_key = indico_api_key,
data = message
)
url <- "https://apiv2.indico.io/emotion/"
response <- POST(url = url, query = params)
content(response)
}
get_emotions_from_indico_api("I really like working here, great place, decent perks")
messages_1 <- c("I really like working here, great place, decent perks", "Hmm, not so sure I'll stay: long working hours and low pay, bad morale")
get_emotions_from_indico_api(messages_1)
get_emotions_from_indico_api("I really like working here, great place, decent perks")
test <- c("I really like working here, great place, decent perks")
get_emotions_from_indico_api(test)
messages_1 <- c("I really like working here, great place, decent perks", "Hmm, not so sure I'll stay: long working hours and low pay, bad morale")
get_emotions_from_indico_api(messages_1)
library(purr)
library(purrr)
library(keyring)
library(httr)
library(purrr)
get_emotions_from_indico_api <- function(message){
keyring_unlock("remote")
indico_api_key <- key_get(service = "indico_api_key", keyring = "remote")
keyring_lock("remote")
params <- list(
api_key = indico_api_key,
data = message
)
url <- "https://apiv2.indico.io/emotion/"
response <- POST(url = url, query = params)
content(response)
}
get_emotions_from_indico_api("I really like working here, great place, decent perks")
messages_1 <- c("I really like working here, great place, decent perks", "Hmm, not so sure I'll stay: long working hours and low pay, bad morale")
get_emotions_from_indico_api(messages_1)
map(.x = messages_1, .f = get_emotions_from_indico_api())
map(.x = messages_1, .f = get_emotions_from_indico_api)
messages <- c("What a nice place to work, I love my colleagues.", "politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises", "My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat", "I really want to quit as soon as possible, I feel stuck")
map(.x = messages, .f = get_emotions_from_indico_api)
flatten_emotions <- flatten(emotions)
messages <- c("What a nice place to work, I love my colleagues.", "politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises", "My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat", "I really want to quit as soon as possible, I feel stuck")
emotions <- map(.x = messages, .f = get_emotions_from_indico_api)
messages <- c("What a nice place to work, I love my colleagues.", "politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises", "My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat", "I really want to quit as soon as possible, I feel stuck")
emotions <- map(.x = messages, .f = get_emotions_from_indico_api)
flatten_emotions <- flatten(emotions)
flatten_emotions <- flatten(emotions)
library(purrr)
flatten_emotions <- flatten(emotions)
str(emotions)
flatten_emotions <- flatten(emotions)
?flatten
str(emotions)
detach("package:jsonlite", unload = TRUE)
flatten_emotions <- flatten(emotions)
flatten
flatten_emotions
str(emotions)
flatten_emotions
anger <- map_dbl(flatten_emotions, "anger")
fear <- map_dbl(flatten_emotions, "fear")
joy <-      map_dbl(flatten_emotions, "joy")
sadness <-  map_dbl(flatten_emotions, "sadness")
surprise <- map_dbl(flatten_emotions, "surprise")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
emotions_df
View(emotions_df)
View(emotions_df)
View(emotions_df)
anger <- map_dbl(flatten_emotions, "anger")
fear <- map_dbl(flatten_emotions, "fear")
joy <-      map_dbl(flatten_emotions, "joy")
sadness <-  map_dbl(flatten_emotions, "sadness")
surprise <- map_dbl(flatten_emotions, "surprise")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
emotions_df
install.packages("tibble")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
anger <- map_dbl(flatten_emotions, "anger")
fear <- map_dbl(flatten_emotions, "fear")
joy <-      map_dbl(flatten_emotions, "joy")
sadness <-  map_dbl(flatten_emotions, "sadness")
surprise <- map_dbl(flatten_emotions, "surprise")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
emotions_df
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("markdown")
anger <- map_dbl(flatten_emotions, "anger")
library(purrr)
str(emotions)
flatten_emotions <- flatten(emotions)
flatten_emotions
anger <- map_dbl(flatten_emotions, "anger")
fear <- map_dbl(flatten_emotions, "fear")
joy <-      map_dbl(flatten_emotions, "joy")
sadness <-  map_dbl(flatten_emotions, "sadness")
surprise <- map_dbl(flatten_emotions, "surprise")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
emotions_df
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
anger <- map_dbl(flatten_emotions, "anger")
fear <- map_dbl(flatten_emotions, "fear")
joy <-      map_dbl(flatten_emotions, "joy")
sadness <-  map_dbl(flatten_emotions, "sadness")
surprise <- map_dbl(flatten_emotions, "surprise")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
emotions_df
anger <- map_dbl(flatten_emotions, "anger")
fear <- map_dbl(flatten_emotions, "fear")
joy <-      map_dbl(flatten_emotions, "joy")
sadness <-  map_dbl(flatten_emotions, "sadness")
surprise <- map_dbl(flatten_emotions, "surprise")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
emotions_df
anger <- map_dbl(flatten_emotions, "anger")
fear <- map_dbl(flatten_emotions, "fear")
joy <-      map_dbl(flatten_emotions, "joy")
sadness <-  map_dbl(flatten_emotions, "sadness")
surprise <- map_dbl(flatten_emotions, "surprise")
emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
emotions_df
# First, pass the messages held in feedbacks through the emotions api
# Get the feedback data into R
acme_feedback <- dbGetQuery(db_connection,
"SELECT message FROM feedbacks")
# First, pass the messages held in feedbacks through the emotions api
# Get the feedback data into R
keyring_unlock("local")
library(keyring)
library(RPostgreSQL)
# First, pass the messages held in feedbacks through the emotions api
# Get the feedback data into R
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
db_connection <- dbConnect(drv = PostgreSQL(),
user = username,
password = password,
dbname = "acme_employees",
host = "localhost")
rm(username)
rm(password)
acme_feedback <- dbGetQuery(db_connection,
"SELECT message FROM feedbacks")
View(acme_feedback)
acme_feedback_emotions
acme_feedback_emotions <- map(.x = acme_feedback, .f = get_emotions_from_indico_api)
library(httr)
acme_feedback_emotions <- map(.x = acme_feedback, .f = get_emotions_from_indico_api)
acme_feedback_list <- as.list(acme_feedback)
acme_feedback_emotions <- map(.x = acme_feedback_list, .f = get_emotions_from_indico_api)
# First, pass the messages held in feedbacks through the emotions api
# Get the feedback data into R
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
db_connection <- dbConnect(drv = PostgreSQL(),
user = username,
password = password,
dbname = "acme_employees",
host = "localhost")
rm(username)
rm(password)
acme_feedback <- dbGetQuery(db_connection,
"SELECT message FROM feedbacks")
acme_feedback_list <- as.list(acme_feedback)
acme_feedback_emotions <- map(.x = acme_feedback_list, .f = get_emotions_from_indico_api)
acme_feedback_emotions <- map_chr(.x = acme_feedback_list, .f = get_emotions_from_indico_api)
View(acme_feedback_list)
acme_fb <- flatten(acme_feedback_list)
View(acme_fb)
acme <- flatten(acme_fb)
View(acme)
acme_feedback_emotions <- map(.x = acme, .f = get_emotions_from_indico_api)
keyring_unlock("remote")
indico_api_key <- key_get(service = "indico_api_key", keyring = "remote")
keyring_lock("remote")
get_emotions_from_indico_api <- function(message){
params <- list(
api_key = indico_api_key,
data = message
)
url <- "https://apiv2.indico.io/emotion/"
response <- POST(url = url, query = params)
content(response)
}
acme_feedback_emotions
acme_feedback_emotions <- map(.x = acme, .f = get_emotions_from_indico_api)
acme_feedback_emotions
acme_feedback_emotions <- flatten(acme_feedback_emotions)
acme_feedback_emotions
anger <-    map_dbl(acme_feedback_emotions, "anger")
fear <-     map_dbl(acme_feedback_emotions, "fear")
joy <-      map_dbl(acme_feedback_emotions, "joy")
sadness <-  map_dbl(acme_feedback_emotions, "sadness")
surprise <- map_dbl(acme_feedback_emotions, "surprise")
acme_emotions_df <- data.frame(
messages = messages,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
acme_emotions_df
View(acme_emotions_df)
map(.x = acme_emotions_df, .f = mean, na.rm = TRUE)
try_employees <- dbGetQuery(db_connection,
"SELECT e.first_name, e.last_name, t.team_id, t.team_name, f.message
FROM (employees AS e INNER JOIN teams AS t
ON e.team_id = t.id)
INNER JOIN feedbacks AS f
ON e.id = f.employee_id")
try_employees <- dbGetQuery(db_connection,
"SELECT e.first_name, e.last_name, t.id, t.team_name, f.message
FROM (employees AS e INNER JOIN teams AS t
ON e.team_id = t.id)
INNER JOIN feedbacks AS f
ON e.id = f.employee_id")
try_employees <- dbGetQuery(db_connection,
"SELECT e.first_name, e.last_name, t.id, t.name, f.message
FROM (employees AS e INNER JOIN teams AS t
ON e.team_id = t.id)
INNER JOIN feedbacks AS f
ON e.id = f.employee_id")
View(try_employees)
acme_feedback_emotions <- map(.x = acme, .f = get_emotions_from_indico_api)
acme_feedback_emotions
acme_feedback_emotions <- flatten(acme_feedback_emotions)
acme_feedback_emotions
anger <-    map_dbl(acme_feedback_emotions, "anger")
fear <-     map_dbl(acme_feedback_emotions, "fear")
joy <-      map_dbl(acme_feedback_emotions, "joy")
sadness <-  map_dbl(acme_feedback_emotions, "sadness")
surprise <- map_dbl(acme_feedback_emotions, "surprise")
acme_emotions_df <- data.frame(
feedback = acme_feedback,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
acme_emotions_df
View(acme_emotions_df)
map(.x = acme_emotions_df, .f = mean, na.rm = TRUE)
try_employees <- dbGetQuery(db_connection,
"SELECT e.first_name, e.last_name, t.id, t.name, f.message
FROM (employees AS e INNER JOIN teams AS t
ON e.team_id = t.id)
INNER JOIN feedbacks AS f
ON e.id = f.employee_id")
try_employees_1 <- map(.x = try_employees, .f = get_emotions_from_indico_api)
try_employees <- dbGetQuery(db_connection,
"SELECT e.first_name, e.last_name, t.id, t.name, f.message
FROM (employees AS e INNER JOIN teams AS t
ON e.team_id = t.id)
INNER JOIN feedbacks AS f
ON e.id = f.employee_id")
try_employees_1 <- map(.x = try_employees$message, .f = get_emotions_from_indico_api)
View(try_employees_1)
anger <-    map_dbl(try_employees_1, "anger")
flattened_employees <- flatten(try_employees_1)
flattened_employees <- flatten(try_employees_1)
anger <-    map_dbl(try_employees_1, "anger")
flattened_employees <- flatten(try_employees_1)
anger <-    map_dbl(flattened_employees, "anger")
fear <-     map_dbl(flattened_employees, "fear")
joy <-      map_dbl(flattened_employees, "joy")
sadness <-  map_dbl(flattened_employees, "sadness")
surprise <- map_dbl(flattened_employees, "surprise")
employees_emotions_df <- data.frame(
feedback = acme_feedback,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
employees_emotions_df
View(employees_emotions_df)
flattened_employees <- flatten(try_employees_1)
anger <-    map_dbl(flattened_employees, "anger")
fear <-     map_dbl(flattened_employees, "fear")
joy <-      map_dbl(flattened_employees, "joy")
sadness <-  map_dbl(flattened_employees, "sadness")
surprise <- map_dbl(flattened_employees, "surprise")
employees_emotions_df <- data.frame(
first_name = try_employees$first_name,
last_name = try_employees$last_name,
team_name = try_employees$name,
feedback = acme_feedback,
anger = anger,
fear = fear,
joy = joy,
sadness = sadness,
surprise = surprise
)
employees_emotions_df
View(try_employees)
View(employees_emotions_df)
map(.x = employees_emotions_df$joy, .f = max, na.rm)
?max
map(.x = employees_emotions_df$joy, .f = max, na.rm = TRUE)
v <- map(.x = employees_emotions_df$joy, .f = max, na.rm = TRUE)
View(v)
map_dbl(.x = employees_emotions_df$joy, .f = max, na.rm = TRUE)
map_dbl(.x = employees_emotions_df$joy, .f = max)
max(employees_emotions_df$joy)
max(employees_emotions_df$anger)
max(employees_emotions_df$joy)
subset(employees_emotions_df$joy == 0.7351469)
employees_emotions_df$joy == 0.7351469
max(employees_emotions_df$joy)
employees_emotions_df$joy == 0.7351469
employees_emotions_df$joy
map_dbl(employees_emotions_df$joy, max, na.rm = TRUE)
joy <- map_dbl(employees_emotions_df$joy, max, na.rm = TRUE)
joy
max(joy)
View(try_employees_1)
View(try_employees)
map_dbl(.x = employees_emotions_df, .f = max)
?subset
subset(employees_emotions_df$joy, max)
subset(employees_emotions_df$joy)
subset(employees_emotions_df, joy)
subset(employees_emotions_df, max(joy))
max(employees_emotions_df$joy)
install.packages("sqldf")
detach("package:RPostgreSQL", unload=TRUE)
library(sqldf)
library(sqldf)
sqldf("SElECT MAX(joy), first_name, last_name, team_name, message FROM employees_emotions_df ")
sqldf("SElECT MAX(anger), first_name, last_name, team_name, message FROM employees_emotions_df ")
acme_employees_tname <- dbGetQuery(db_connection,
"SELECT e.id, e.first_name, e.last_name, e.email, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id")
library(keyring)
library(RPostgreSQL)
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
db_connection <- dbConnect(drv = PostgreSQL(),
user = username,
password = password,
dbname = "acme_employees",
host = "localhost")
acme_employees_df <- dbGetQuery(db_connection,
"SELECT * FROM employees,
CONCAT(first_name, ' ', last_name) AS full_name")
View(acme_employees_df)
acme_employees_tname <- dbGetQuery(db_connection,
"SELECT e.id, e.first_name, e.last_name, e.email, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id")
View(acme_employees_tname)
acme_employees_missing_name <- dbGetQuery(db_connection,
"SELECT e.id, e.first_name, e.last_name, e.email, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id
WHERE e.first_name IS NULL
OR e.first_name LIKE '_' ")
acme_employees_missing_name <- dbGetQuery(db_connection,
"SELECT e.id, e.first_name, e.last_name, e.email, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id
WHERE e.first_name IS NULL
OR e.first_name LIKE '_'
LIMIT 1")
View(acme_feedback_list)
View(acme_employees_missing_name)
acme_employees_missing_name <- dbGetQuery(db_connection,
"SELECT e.id, e.first_name, e.last_name, e.email, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id
WHERE e.first_name IS NULL
OR e.first_name LIKE '_' ")
View(acme_employees_missing_name)
View(acme_employees_missing_name)
?map_dfr
map_df(employees_emotions_df, mean, na.rm = TRUE)
